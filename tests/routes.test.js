import chai from 'chai';
import chaiHttp from 'chai-http';
import server from '../server'; // Adjust the path to your server file
import sinon from 'sinon';
import AppController from '../controllers/AppController';
import dbClient from '../utils/db';
import redisClient from '../utils/redis';

const should = chai.should();

chai.use(chaiHttp);
/* eslint-disable */
describe('Routes', () => {
  // Example test case

//   Inside server.js, create the Express server:

// it should listen on the port set by the environment variable PORT or by default 5000
// it should load all routes from the file routes/index.js
// Inside the folder routes, create a file index.js that contains all endpoints of our API:

// GET /status => AppController.getStatus
// GET /stats => AppController.getStats
// Inside the folder controllers, create a file AppController.js that contains the definition of the 2 endpoints:

// GET /status should return if Redis is alive and if the DB is alive too by using the 2 utils created previously: { "redis": true, "db": true } with a status code 200
// GET /stats should return the number of users and files in DB: { "users": 12, "files": 1231 } with a status code 200
// users collection must be used for counting all users
// files collection must be used for counting all files
describe('Routes', () => {
  describe('GET /status', () => {
    it('it should return the status of Redis and DB', (done) => {
      const redisStub = sinon.stub(redisClient, 'isAlive').returns(true);
      const dbStub = sinon.stub(dbClient, 'isAlive').returns(true);

      chai.request(server)
        .get('/status')
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a('object');
          res.body.should.have.property('redis').eql(true);
          res.body.should.have.property('db').eql(true);
          redisStub.restore();
          dbStub.restore();
          done();
        });
    });
  });

  describe('GET /stats', () => {
    it('it should return the number of users and files in DB', (done) => {
      const usersCountStub = sinon.stub(dbClient, 'nbUsers').returns(12);
      const filesCountStub = sinon.stub(dbClient, 'nbFiles').returns(1231);

      chai.request(server)
        .get('/stats')
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a('object');
          res.body.should.have.property('users').eql(12);
          res.body.should.have.property('files').eql(1231);
          usersCountStub.restore();
          filesCountStub.restore();
          done();
        });
    });
  });

// Now that we have a simple API, itâ€™s time to add users to our database.

// In the file routes/index.js, add a new endpoint:

// POST /users => UsersController.postNew
// Inside controllers, add a file UsersController.js that contains the new endpoint:

// POST /users should create a new user in DB:

// To create a user, you must specify an email and a password
// If the email is missing, return an error Missing email with a status code 400
// If the password is missing, return an error Missing password with a status code 400
// If the email already exists in DB, return an error Already exist with a status code 400
// The password must be stored after being hashed in SHA1
// The endpoint is returning the new user with only the email and the id (auto generated by MongoDB) with a status code 201
// The new user must be saved in the collection users:
// email: same as the value received
// password: SHA1 value of the value received
describe('POST /users', () => {
  it('it should not create a user without email', (done) => {
    const user = {
      password: '123456'
    };
    chai.request(server)
      .post('/users')
      .send(user)
      .end((err, res) => {
        res.should.have.status(400);
        res.body.should.be.a('object');
        res.body.should.have.property('error').eql('Missing email');
        done();
      });
  });

  it('it should not create a user without password', (done) => {
    const user = {
      email: 'test@example.com'
    };
    chai.request(server)
      .post('/users')
      .send(user)
      .end((err, res) => {
        res.should.have.status(400);
        res.body.should.be.a('object');
        res.body.should.have.property('error').eql('Missing password');
        done();
      });
  });

  it('it should not create a user with an existing email', (done) => {
    const user = {
      email: 'test@example.com',
      password: '123456'
    };
    const emailExistsStub = sinon.stub(dbClient, 'findUserByEmail').returns(true);

    chai.request(server)
      .post('/users')
      .send(user)
      .end((err, res) => {
        res.should.have.status(400);
        res.body.should.be.a('object');
        res.body.should.have.property('error').eql('Already exist');
        emailExistsStub.restore();
        done();
      });
  });

  it('it should create a user with valid email and password', (done) => {
    const user = {
      email: 'test@example.com',
      password: '123456'
    };
    const emailExistsStub = sinon.stub(dbClient, 'findUserByEmail').returns(false);
    const addUserStub = sinon.stub(dbClient, 'addUser').returns({
      _id: '507f1f77bcf86cd799439011',
      email: 'test@example.com'
    });

    chai.request(server)
      .post('/users')
      .send(user)
      .end((err, res) => {
        res.should.have.status(201);
        res.body.should.be.a('object');
        res.body.should.have.property('id');
        res.body.should.have.property('email').eql('test@example.com');
        emailExistsStub.restore();
        addUserStub.restore();
        done();
      });
  });
});
});
  // Add more test cases here
});
